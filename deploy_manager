#!/bin/bash

ABIDIR=""
ACTION=""
NETWORK="localhost"
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
VERSIONTYPE="patch"

while [[ "$#" -gt 0 ]]; do
  case $1 in
  -n | --network)
    NETWORK=$2
    ;;
  -t | --type)
    VERSIONTYPE=$2
    ;;
  -a | --action)
    ACTION=$2
    ;;
  esac
  shift
done

if [ "$ACTION" == "" ]; then
  echo "-- ERROR: ACTION option is mandatory. Possible values: [deploy | upgrade]"
  exit 1
fi

# Get the list of branches from the repository
BRANCHES=$(git branch --format='%(refname:short)')
select BRANCH in $BRANCHES; do
  if [ ! -z "$BRANCH" ]; then
    break
  fi
done

run_command() {
  if ! "$@" >/dev/null 2>&1; then
    echo "$1 command failed"
    exit 1
  fi
}

# Checkout the selected branch and install npm dependencies
git checkout $BRANCH
npm ci -q --no-progress

# Compile project
npx hardhat compile --force

# Only deployments for stage and main branches are tagged
if [[ $BRANCH == "stage" || $BRANCH == "main" ]]; then
  source ./tag-release -b "$BRANCH" -n -t "$VERSIONTYPE"
else
  TAGVERSION="dev"
fi

if [ "$ACTION" == "deploy" ]; then
  # Run script to deploy the contracts
  npx hardhat --network "$NETWORK" deploy:contracts --tag "$TAGVERSION"
elif [ "$ACTION" == "upgrade" ]; then
  # Run script to upgrade the contracts
  npx hardhat --network "$NETWORK" upgrade:Lock --tag "$TAGVERSION"
else
  echo "-- ERROR: Wrong ACTION value. Possible values: [deploy | upgrade]"
  exit 1
fi

if [[ $NETWORK == "mainnet" || $NETWORK == "goerli" ]]; then

  # Update .openzeppelin metadata
  git add .openzeppelin/"$NETWORK".json
  git commit -m "Update .openzeppelin folder"
  git push -u origin $branch

  if [[ $BRANCH == "stage" || $BRANCH == "main" ]]; then
    source ./tag-release -b "$BRANCH" -t "$VERSIONTYPE"
  fi
  ABIDIR="docs/$NETWORK/abi/$TAGVERSION"

  git checkout gh-pages

  # Publish the ABI to a specific GitHub Pages location
  mkdir -p $ABIDIR
  cp abi/*.json $ABIDIR

  git add $ABIDIR
  git commit -m "Publish ABI for deployment to $NETWORK"
  git push -u -f origin gh-pages
fi

git checkout $CURRENT_BRANCH
